package com.ict.day08;

public class Ex06 {
		/*
		 	클래스
		 	1. 정의 : 객체(Object)를 만들기 위한 모든 정보를 가지고 있는 파일 (설계도면, 거푸집 등으로 표현)
		 	2. 클래스가 가지고 있는 것
		 			- 멤버 필드 : (변수, 상수), 속성 
		 			- 멤버 메소드 : 기능, 동작,
		 			- 생성자 : 클래스가 객체로 생성될 때 한번 호출된다
		 							클래스 이름 = 파일 이름 = 저장 이름 = 생성자 이름;
		 	3. 클래스 구조 : 헤더, 멤버 필드, 멤버 메소드, 생성자로 구성된다
		 		1) 헤더 : [접근제한자] [클래스 종류] class 클래스이름([인자]) {}	// [대괄호]는 생략가능
		 			ㄱ) 접근제한자 : 클래스, 멤버 필드, 멤버 메소드, 생성자 모두 맨앞에 사용 가능(생략 가능)
		 									 외부에서 접근할 수 있는 권한의 단계를 말함
		 				- public : 누구나 전부 접근 가능
		 				- private : 외부에서 전부 접근 불가
		 								  내부 멤버(클래스 안에 있는 멤버 필드와 멤버 메서드)끼리는 접근 가능
		 				- default(생략) : 같은 패키지에서만 접근 가능
		 				- protected : 같은 패키지에서 접근 가능, 다른 패키지일때는 상속관계일때만 가능
		 			ㄴ) 클래스 종류 : 일반적인 클래스는 생략한다.
		 									  특정 클래스에 해당하는 클래스에게만 예약어 사용(final, abstract, ...) 
		 			ㄷ) class : 클래스임을 나타내는 예약어
		 			ㄹ) 클래스이름 : 클래스 이름 = 파일 이름 = 저장 이름 = 생성자 이름
		 			 						첫글자는 대문자, 두 단어 이상일 때는 단어 첫글자들은 대문자 /  ex) Ex09Cow
		 			 						숫자는 중간이나 뒤에 사용, 공백문자 사용 불가
		 	4. 멤버 필드 : 데이터, 속성, 상태값, 특징
		 		1) 변수 : 언제든지 변할 수 있는 속성, 상태값, 데이터
		 		2) 상수 : 한번 지정하면 절대로 변경할 수 없는 데이터, 속성, 상태값
		 	5. 멤버 메소드 : 동작, 기능
		 		1) 해당 메소드를 호출(실행)하면 해당 메소드 안에 존재한 **내용이 실행된다
		 		2) 내용이 실행 된 후 **내용이 끝나면 호출 한 곳으로 되돌아간다**
		 		3) 메소드가 다른 메소드를 호출할 수 있다
		 		
		 		5-1) 메소드 구성
		 			: [접근제한자] [메소드종류] 반환형 메소드이름 ( [인자(=매개 변수)] ) { 실행 내용 }
		 			ㄱ) 접근제한자는 클래스 설명에서의 접근제한자와 동일
		 			ㄴ) 메소드 종류 : 일반적인 메소드는 이 부분 생략 한다
		 									 특정 메소드일때 해당 예약어 사용 (static 예약어)
		 			ㄷ) 반환형 : 해당 메소드가 실행이 끝나면 호출한 곳으로 되돌아감
		 							  되돌아 갈 때 정보를 가지고 갈 수 있는데, 이 때 이 정보의 자료형을 말한다
		 							  만약에 정보를 가지고 가지 않을때는 void라는 예약어를 사용한다
		 		
		 			public static void main(String[] args) { }  
				// 메인 메소드 : 해당 메소드를 실행한 후에 호출한 JVM에게는 되돌아 가는데 아무것도 가져가지 않는다
				 
		 			ㄹ) 메소드 이름 : 첫글자 소문자, 두 단어 이상일 때는 단어 첫 글자들은 대문자 / ex) toString()
		 									 ( [인자=매개변수] )앞에 이름이 붙는다
		 			ㅁ) 인자(=매개변수) : 메소드가 실행할 때 필요한 정보를 외부에서 받기 위한 통로
		 				** 메소드 이름이 같아도 인자 수나 인자 자료형이 다르면 다른 메소드로 취급한다
		 				** 오버로딩 (중복정의) : 클래스 안에 같은 이름을 가진 메소드가 여러개 정의되어 있는것
		 	6. 생성자 : 클래스가 객체로 만들어질때 한번 호출된다
		 		1) 목적 : 멤버 필드(변수와 상수)의 초기값을 지정하는 것
		 		2) 형식 : 클래스 이름과 생성자 이름은 동일
		 					  메소드와 다른점은 반환형이 없다
		 					   [접근제한자] 생성자 이름(=클래스 이름)( [인자] ) {실행 내용}
		 					   public class Ex06 이때 생성자는 [접근제한자(=public)] Ex06 ([인자])
		 					   인자가 없는 생성자를 "기본 생성자"라고 한다 => Ex06( ){ }
		 					   생성자도 오버로딩이 가능하다
		 					   즉, 하나의 클래스안에 여러개의 생성자가 존재할 수 있다
		 		3) 생성자 없이 클래스를 객체로 생성하면 기본 생성자를 호출해서 객체를 만든다
		 		4) 모든 클래스는 생성자를 가지고있다
		 		5) 클래스를 이용해서 객체를 만드는 방법
		 			Scanner   scan  	=   				new 					Scanner(System.in);
		 			클래스	  참조변수	=  객체를 만들기 위한 예약어	     생성자	   		인자
		 			new 예약어를 사용하면 무조건 heap 메모리에 사용 영역을 만든다
		 			즉, 인스턴스(=객체 생성)를 의미한다
		 			
		 	7. 클래스를 객체로 만든 후 멤버 필드와 멤버 메소드에 접근하는 방법
		 		: 참조 변수.멤버 필드 , 참조 변수.멤버 메소드();  (단, 접근제한자를 확인하자)
		 			 								scan .  nextInt  ();
		 	8. static , instance : 멤버 필드, 멤버 메소드에 공통으로 해당되는 사항
		 	 	1) instance(인스턴스) : 객체 생성 (전역 변수)
		 	 		ㄱ) 인스턴스 필드, 인스턴스 메소드 : 객체 생성할때 같이 생성되는 필드와 메소드를 말한다
		 	 		ㄴ) 일반적인 클래스의 멤버 필드나 멤버 메소드는 모두 instance
		 	 		ㄷ) 호출 방법 : 참조 변수.멤버 필드 , 참조 변수.멤버 메소드();
		 	 		ㄹ) heap 메모리에 만들어진다
		 	 	2) static
		 	 		ㄱ) 객체 생성과 상관없이 미리 만들어진 멤버 필드와 멤버 메소드
		 	 		ㄴ) 반드시 static 이라는 예약어를 사용한다 (없을시 instance)
		 	 		ㄷ) 객체 생성과 상관없이 호출 가능(미리 만들어져있기 때문에)
		 	 		ㄹ) 호출 방법 : 클래스이름.멤버 필드 , 클래스이름.멤버 메소드
		 	 								  system.out		 ,        Math.max();
		 	 	
		 지역 변수 또는 메소드 인자에 사용되는 변수는 해당 메소드가 실행될 때 만들어진다
		 객체 생성할때는 만들어지지 않는다
		
		메모리
			1) 스태틱(static) : 프로그램이 시작 전부터 끝까지 존재하는 메모리 영역
			2) 힙 (heap) : 프로그램이 시작할때는 있거나 중간에 만들어졌다가
									어느 순간에는 없어진다. (동적할당)
									자기 할일을 다하면 사라진다
			3) 스택 : heap 영역에 생성된 Object 타입의 데이터의 참조값이 할당된다.
						원시타입의 데이터가 값과 함께 할당된다.
						원시타입 (byte, short, int, long, double, float, boolean, char)타입의
						데이터들이 할당된다. 
						이때 원시타입의 데이터들에 대해서는 참조값을 저장하는 것이 아니라
						실제값을 stack에 직접 저장하게 된다.
						
		접근제한자 시험에 출제 확인 필요
		instance 와 static의 차이점 서술(시험제출)
		 */
		
	
}
